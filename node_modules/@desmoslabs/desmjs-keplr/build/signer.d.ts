import { AccountData, DirectSignResponse } from "@cosmjs/proto-signing";
import { ChainInfo, Keplr, Window as KeplrWindow, KeplrSignOptions } from "@keplr-wallet/types";
import { SignDoc } from "cosmjs-types/cosmos/tx/v1beta1/tx";
import { AminoSignResponse, StdSignDoc } from "@cosmjs/amino";
import { Signer, SigningMode } from "@desmoslabs/desmjs";
declare global {
    interface Window extends KeplrWindow {
    }
}
export interface KeplrSignerOptions {
    signingMode: SigningMode;
    chainInfo: ChainInfo;
    signOptions: KeplrSignOptions;
}
export declare const DesmosMainnet: ChainInfo;
export declare const DesmosTestnet: ChainInfo;
/**
 * Signer that use Keplr to sign a transaction.
 */
export declare class KeplrSigner extends Signer {
    readonly chainInfo: ChainInfo;
    readonly signingMode: SigningMode;
    private readonly client;
    private accountData;
    constructor(keplrClient: Keplr, options: KeplrSignerOptions);
    /**
     * Subscribes to all the Keplr events.
     * @private
     */
    private subscribeToEvents;
    /**
     * Implements Signer.
     */
    connect(): Promise<void>;
    /**
     * Implements Signer.
     */
    disconnect(): Promise<void>;
    /**
     * Implements Signer.
     */
    getCurrentAccount(): Promise<AccountData | undefined>;
    /**
     * Implements Signer.
     *
     */
    getAccounts(): Promise<readonly AccountData[]>;
    /**
     * Implements OfflineDirectSigner.
     */
    signDirect(signerAddress: string, signDoc: SignDoc): Promise<DirectSignResponse>;
    /**
     * Implements OfflineDirectSigner.
     */
    signAmino(signerAddress: string, signDoc: StdSignDoc): Promise<AminoSignResponse>;
    static setupChainNetwork(chainInfo: ChainInfo): Promise<void>;
}
